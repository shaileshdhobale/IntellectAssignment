#!/usr/bin/env node

/**
 * Module dependencies.
 */
var log4js = require('log4js');
var app = require('../app.js');
var http = require('http');
var fs = require('fs');

// Internal Dependencies
var config = require("../config/config");
var envConfig = config.environmentConfig();

//logger
var logger = log4js.getLogger('[bin/www]');
/**
 * Get port from environment and store in Express.
 */
var appPort = envConfig.port;


var port = normalizePort(process.env.PORT || appPort || '3000');
app.set('port', port);
logger.info("VehicleModule server running on port : " + appPort + " and server environment is : " + config.environmentType());
/**
 * Create HTTP server.
 */

var server = require('http').createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        logger.error(JSON.stringify(error));
        throw error;
    }

    var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            logger.error(error);
            throw error;
    }
}

//Used while sticky session is on
process.on('uncaughtException', function(err) {
    logger.error('whoops! There was an uncaught error: ' + err.code);
    if (err.syscall !== 'listen') {
        logger.error(JSON.stringify(err));
        throw err;
    }

    var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

    switch (err.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            logger.error(err);
            throw err;
    }
    // do a graceful shutdown,
    // close the database connection etc.
    process.exit(1);
});